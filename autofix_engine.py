"""
AetheroOS Autofix Engine
-----------------------
Automatizovaný engine pre auditné autofixy podľa MASTER_PROMPTu.
Spúšťa sa po audite alebo podľa harmonogramu (cron/schedule).
"""
import os
import glob
import json
from datetime import datetime

def find_all_files(root_dir="."):
    """Prejde celý filesystem a vráti zoznam všetkých .py, .md, .yaml, .json, .ts, .tsx, .js, .sh, .txt súborov."""
    exts = ('.py', '.md', '.yaml', '.yml', '.json', '.ts', '.tsx', '.js', '.sh', '.txt')
    all_files = []
    for dirpath, _, filenames in os.walk(root_dir):
        for f in filenames:
            if f.endswith(exts):
                all_files.append(os.path.join(dirpath, f))
    return all_files

def find_missing_modules():
    """Zistí chýbajúce alebo neúplné moduly podľa posledného auditu a filesystemu."""
    json_files = sorted(glob.glob('aethero_audit_*.json'))
    missing = []
    if json_files:
        with open(json_files[-1], 'r', encoding='utf-8') as f:
            audit = json.load(f)
        # Príklad: očakávame memory_ingest.py, manifesty, atď.
        required = ['memory_ingest.py', 'Aethero_App/aethero_manifest.yaml']
        missing += [f for f in required if not os.path.exists(f)]
    # Navyše: prehľadaj všetky .py/.md/.yaml atď. a hľadaj prázdne alebo len placeholdery
    all_files = find_all_files()
    for f in all_files:
        try:
            with open(f, 'r', encoding='utf-8') as ff:
                content = ff.read(256)
                if 'Placeholder' in content or content.strip() == '' or content.startswith('# TODO'):
                    missing.append(f)
        except Exception:
            continue
    return sorted(set(missing))

def create_placeholder(filename):
    """Vytvorí placeholder súbor s minimálnou štruktúrou."""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"# Placeholder for {filename}\n# Generated by autofix_engine.py on {datetime.now().isoformat()}\n")

def autofix():
    log = []
    missing = find_missing_modules()
    for f in missing:
        create_placeholder(f)
        log.append(f"[AUTO] Created placeholder: {f}")
    # Príklad: ďalšie autofixy podľa pravidiel (manifest sekcie, ASL validácia...)
    # ...
    # Logovanie
    log_path = f"docs/AUDIT_AUTOFIX_LOG.md"
    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(f"\n## Autofix run {datetime.now().isoformat()}\n" + '\n'.join(log) + '\n')
    # JSON výstup
    out_json = f"outputs/aethero_autofix_{datetime.now().strftime('%Y%m%d')}.json"
    with open(out_json, 'w', encoding='utf-8') as f:
        json.dump({'timestamp': datetime.now().isoformat(), 'actions': log}, f, indent=2)
    print(f"[AUTO] Autofix engine completed. Log: {log_path}")

if __name__ == "__main__":
    autofix()
