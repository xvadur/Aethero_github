#!/usr/bin/env python3
"""
Test s√∫bor pre overenie funkƒçnosti models.py s Pydantic v2
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'introspective_parser_module'))

from introspective_parser_module.models import (
    MentalStateEnum,
    EmotionToneEnum, 
    TemporalContextEnum,
    AetheroIntrospectiveEntity,
    ASLCognitiveTag
)

def test_enum_functionality():
    """Test z√°kladnej funkƒçnosti enumer√°ci√≠"""
    print("üß† Testovanie enumer√°ci√≠...")
    
    # Test ment√°lnych stavov
    state = MentalStateEnum.CALM
    print(f"   Ment√°lny stav: {state}")
    
    # Test emocion√°lnych t√≥nov
    emotion = EmotionToneEnum.ANALYTICAL
    print(f"   Emocion√°lny t√≥n: {emotion}")
    
    # Test ƒçasov√Ωch kontextov
    temporal = TemporalContextEnum.PRESENT
    print(f"   ƒåasov√Ω kontext: {temporal}")

def test_introspective_entity():
    """Test z√°kladnej introspekt√≠vnej entity"""
    print("\nüîÆ Testovanie AetheroIntrospectiveEntity...")
    
    entity = AetheroIntrospectiveEntity()
    print(f"   Entity ID: {entity.entity_id}")
    print(f"   ƒåas vytvorenia: {entity.creation_moment}")
    print(f"   √örove≈à vedomia: {entity.consciousness_level}")

def test_asl_cognitive_tag():
    """Test hlavn√©ho ASL kognit√≠vneho tagu"""
    print("\nüè∑Ô∏è  Testovanie ASLCognitiveTag...")
    
    try:
        tag = ASLCognitiveTag(
            thought_stream="Analyzujem komplexn√© my≈°lienkov√© procesy",
            mental_state=MentalStateEnum.ANALYTICAL,
            emotion_tone=EmotionToneEnum.ANALYTICAL,
            cognitive_load=5,
            temporal_context=TemporalContextEnum.PRESENT,
            certainty_level=0.8,
            aeth_mem_link="mem_001",
            constitutional_law="Z√°kon o vedomej anal√Ωze"
        )
        
        print(f"   My≈°lienkov√Ω tok: {tag.thought_stream}")
        print(f"   Ment√°lny stav: {tag.mental_state}")
        print(f"   Kognit√≠vna z√°≈•a≈æ: {tag.cognitive_load}")
        print(f"   √örove≈à istoty: {tag.certainty_level}")
        
        # Test introspekt√≠vnych met√≥d
        tag.enhance_consciousness(0.2)
        print(f"   Zv√Ω≈°en√© vedomie: {tag.consciousness_level}")
        
        tag.resonate_with_memory({"test": "memory_data"})
        print(f"   Pam√§≈•ov√° rezonancia: {tag.consciousness_resonance}")
        
    except Exception as e:
        print(f"   ‚ùå Chyba: {e}")
        return False
    
    return True

def test_validation_logic():
    """Test validaƒçnej logiky"""
    print("\n‚úÖ Testovanie validaƒçnej logiky...")
    
    # Test nekonzistentn√©ho stavu - pokojn√Ω stav s vysokou kognit√≠vnou z√°≈•a≈æou
    try:
        invalid_tag = ASLCognitiveTag(
            thought_stream="Test",
            mental_state=MentalStateEnum.CALM,
            emotion_tone=EmotionToneEnum.NEUTRAL,
            cognitive_load=9,  # Vysok√° z√°≈•a≈æ s pokojn√Ωm stavom
            temporal_context=TemporalContextEnum.PRESENT,
            certainty_level=0.5,
            aeth_mem_link="mem_test",
            constitutional_law="Test z√°kon"
        )
        print("   ‚ùå Valid√°cia zlyhala - mal by by≈• error!")
        return False
    except ValueError as e:
        print(f"   ‚úÖ Valid√°cia funguje: {e}")
        return True

if __name__ == "__main__":
    print("üöÄ Sp√∫≈°≈•am testy pre Aethero introspekt√≠vne modely...\n")
    
    test_enum_functionality()
    test_introspective_entity()
    
    success = test_asl_cognitive_tag()
    if success:
        test_validation_logic()
    
    print("\nüéØ Testy dokonƒçen√©!")
