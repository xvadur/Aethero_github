#!/usr/bin/env python3
"""
Aethero Introspective Demo - Uk√°≈ækov√° aplik√°cia pre testovanie kognit√≠vnych tagov
Demonstruje mo≈ænosti introspekt√≠vnej anal√Ωzy s modernizovan√Ωmi Pydantic v2 modelmi
"""

import json
from datetime import datetime
from introspective_parser_module.models import (
    MentalStateEnum,
    EmotionToneEnum, 
    TemporalContextEnum,
    AetheroIntrospectiveEntity,
    ASLCognitiveTag
)

def create_sample_scenarios():
    """Vytvor√≠ vzorov√© scen√°re pre demonstr√°ciu kognit√≠vnych stavov"""
    
    scenarios = [
        {
            "name": "üßò Meditaƒçn√° anal√Ωza",
            "thought_stream": "Vn√≠mam hlbok√Ω pokoj v mysli, my≈°lienky sa spomaƒæuj√∫ a nast√°va jasnos≈•",
            "mental_state": MentalStateEnum.CALM,
            "emotion_tone": EmotionToneEnum.POSITIVE,
            "cognitive_load": 3,
            "temporal_context": TemporalContextEnum.PRESENT,
            "certainty_level": 0.9,
            "constitutional_law": "Z√°kon o vn√∫tornom pokoji a harmonii"
        },
        {
            "name": "üîç Analytick√© uva≈æovanie",
            "thought_stream": "Rozklad√°m komplexn√Ω probl√©m na men≈°ie ƒçasti, hƒæad√°m vzorce a s√∫vislosti",
            "mental_state": MentalStateEnum.FOCUSED,
            "emotion_tone": EmotionToneEnum.ANALYTICAL,
            "cognitive_load": 7,
            "temporal_context": TemporalContextEnum.PRESENT,
            "certainty_level": 0.75,
            "constitutional_law": "Z√°kon o systematickom uva≈æovan√≠"
        },
        {
            "name": "üí≠ Reflex√≠vne spom√≠nanie",
            "thought_stream": "Prem√Ω≈°ƒæam o minul√Ωch rozhodnutiach a ich dopadoch na s√∫ƒçasnos≈•",
            "mental_state": MentalStateEnum.REFLECTIVE,
            "emotion_tone": EmotionToneEnum.ANALYTICAL,
            "cognitive_load": 5,
            "temporal_context": TemporalContextEnum.PAST,
            "certainty_level": 0.6,
            "constitutional_law": "Z√°kon o historickej m√∫drosti"
        },
        {
            "name": "‚ö° Rozhodn√Ω ƒçin",
            "thought_stream": "M√°m jasn√Ω pl√°n, viem presne ƒço treba urobi≈• a ako to vykona≈•",
            "mental_state": MentalStateEnum.DECISIVE,
            "emotion_tone": EmotionToneEnum.POSITIVE,
            "cognitive_load": 6,
            "temporal_context": TemporalContextEnum.FUTURE,
            "certainty_level": 0.95,
            "constitutional_law": "Z√°kon o rozhodn√Ωch ƒçinoch"
        },
        {
            "name": "ü§î Kontemplat√≠vne hƒæadanie",
            "thought_stream": "Uva≈æujem o hlb≈°√≠ch ot√°zkach existencie a zmysle bytia",
            "mental_state": MentalStateEnum.CONTEMPLATIVE,
            "emotion_tone": EmotionToneEnum.EMPATHETIC,
            "cognitive_load": 8,
            "temporal_context": TemporalContextEnum.TIMELESS,
            "certainty_level": 0.4,
            "constitutional_law": "Z√°kon o filozofickej introspkekcii"
        }
    ]
    
    return scenarios

def demonstrate_cognitive_tag(scenario):
    """Demon≈°truje vytvorenie a anal√Ωzu kognit√≠vneho tagu"""
    
    print(f"\n{'='*60}")
    print(f"üè∑Ô∏è  {scenario['name']}")
    print(f"{'='*60}")
    
    try:
        # Vytvorenie ASL kognit√≠vneho tagu
        tag = ASLCognitiveTag(
            thought_stream=scenario["thought_stream"],
            mental_state=scenario["mental_state"],
            emotion_tone=scenario["emotion_tone"],
            cognitive_load=scenario["cognitive_load"],
            temporal_context=scenario["temporal_context"],
            certainty_level=scenario["certainty_level"],
            aeth_mem_link=f"mem_demo_{len(scenario['name'])}",
            constitutional_law=scenario["constitutional_law"],
            enhancement_suggestion="Aplikova≈• techniky hlbokej introspekcie",
            diplomatic_enhancement="Zachova≈• empatiu a porozumenie"
        )
        
        print(f"üìù My≈°lienkov√Ω tok: {tag.thought_stream}")
        print(f"üß† Ment√°lny stav: {tag.mental_state.value}")
        print(f"üí≠ Emocion√°lny t√≥n: {tag.emotion_tone.value}")
        print(f"‚ö° Kognit√≠vna z√°≈•a≈æ: {tag.cognitive_load}/10")
        print(f"‚è∞ ƒåasov√Ω kontext: {tag.temporal_context.value}")
        print(f"üéØ √örove≈à istoty: {tag.certainty_level:.1%}")
        print(f"üîó Pam√§≈•ov√Ω odkaz: {tag.aeth_mem_link}")
        print(f"‚öñÔ∏è  √östavn√Ω z√°kon: {tag.constitutional_law}")
        
        # Demon≈°tr√°cia introspekt√≠vnych met√≥d
        print(f"\nüìä Meta-kognit√≠vne vlastnosti:")
        print(f"   üîÆ Introspekt√≠vna hƒ∫bka: {tag.introspective_depth:.2f}")
        print(f"   üåü √örove≈à vedomia: {tag.consciousness_level:.2f}")
        
        # Zv√Ω≈°enie vedomia
        tag.enhance_consciousness(0.15)
        print(f"   üöÄ Po zv√Ω≈°en√≠ vedomia: {tag.consciousness_level:.2f}")
        
        # Pridanie pam√§≈•ovej rezonancie
        memory_data = {
            "scenario": scenario["name"],
            "timestamp": datetime.now().isoformat(),
            "cognitive_signature": f"{tag.mental_state.value}_{tag.emotion_tone.value}"
        }
        tag.resonate_with_memory(memory_data)
        print(f"   üíæ Pam√§≈•ov√° rezonancia: {len(tag.consciousness_resonance)} polo≈æiek")
        
        return tag
        
    except Exception as e:
        print(f"‚ùå Chyba pri vytv√°ran√≠ tagu: {e}")
        return None

def demonstrate_validation_errors():
    """Demon≈°truje validaƒçn√© chyby pre edukaƒçn√© √∫ƒçely"""
    
    print(f"\n{'='*60}")
    print("‚ö†Ô∏è  DEMON≈†TR√ÅCIA VALIDAƒåN√ùCH CH√ùB")
    print(f"{'='*60}")
    
    error_cases = [
        {
            "name": "Pokojn√Ω stav s extr√©mnou z√°≈•a≈æou",
            "params": {
                "mental_state": MentalStateEnum.CALM,
                "cognitive_load": 10,  # Pr√≠li≈° vysok√© pre pokojn√Ω stav
                "certainty_level": 0.8
            }
        },
        {
            "name": "Neist√Ω stav s vysokou istotou",
            "params": {
                "mental_state": MentalStateEnum.UNCERTAIN,
                "cognitive_load": 5,
                "certainty_level": 0.95  # Pr√≠li≈° vysok√© pre neist√Ω stav
            }
        },
        {
            "name": "Zm√§ten√Ω stav s n√≠zkou z√°≈•a≈æou",
            "params": {
                "mental_state": MentalStateEnum.CONFUSED,
                "cognitive_load": 1,  # Pr√≠li≈° n√≠zke pre zm√§ten√Ω stav
                "certainty_level": 0.3
            }
        }
    ]
    
    for case in error_cases:
        print(f"\nüî¥ Test: {case['name']}")
        try:
            ASLCognitiveTag(
                thought_stream="Test nekonzistentn√©ho stavu",
                mental_state=case["params"]["mental_state"],
                emotion_tone=EmotionToneEnum.NEUTRAL,
                cognitive_load=case["params"]["cognitive_load"],
                temporal_context=TemporalContextEnum.PRESENT,
                certainty_level=case["params"]["certainty_level"],
                aeth_mem_link="test_mem",
                constitutional_law="Test z√°kon"
            )
            print("   ‚ùå CHYBA: Valid√°cia mala zlyha≈•!")
        except ValueError as e:
            print(f"   ‚úÖ Valid√°cia spr√°vne zachytila chybu: {str(e).split(',')[0]}")

def export_demo_results(tags):
    """Exportuje v√Ωsledky demo do JSON s√∫boru"""
    
    export_data = {
        "export_timestamp": datetime.now().isoformat(),
        "aethero_version": "v2.0_pydantic",
        "total_tags": len(tags),
        "tags": []
    }
    
    for tag in tags:
        if tag:
            tag_data = {
                "entity_id": tag.entity_id,
                "thought_stream": tag.thought_stream,
                "mental_state": tag.mental_state.value,
                "emotion_tone": tag.emotion_tone.value,
                "cognitive_load": tag.cognitive_load,
                "temporal_context": tag.temporal_context.value,
                "certainty_level": tag.certainty_level,
                "consciousness_level": tag.consciousness_level,
                "introspective_depth": tag.introspective_depth,
                "constitutional_law": tag.constitutional_law,
                "consciousness_resonance": tag.consciousness_resonance
            }
            export_data["tags"].append(tag_data)
    
    with open("aethero_demo_results.json", "w", encoding="utf-8") as f:
        json.dump(export_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ V√Ωsledky exportovan√© do: aethero_demo_results.json")

def main():
    """Hlavn√° funkcia demo aplik√°cie"""
    
    print("üöÄ AETHERO INTROSPECTIVE DEMO - Pydantic v2")
    print("=" * 60)
    print("Demon≈°tr√°cia kognit√≠vnych tagov s modernizovan√Ωmi modelmi")
    
    # Vytvorenie vzorov√Ωch scen√°rov
    scenarios = create_sample_scenarios()
    created_tags = []
    
    # Demon≈°tr√°cia ka≈æd√©ho scen√°ra
    for scenario in scenarios:
        tag = demonstrate_cognitive_tag(scenario)
        if tag:
            created_tags.append(tag)
    
    # Demon≈°tr√°cia validaƒçn√Ωch ch√Ωb
    demonstrate_validation_errors()
    
    # Export v√Ωsledkov
    export_demo_results(created_tags)
    
    # S√∫hrn
    print(f"\n{'='*60}")
    print("üìà S√öHRN DEMO APLIK√ÅCIE")
    print(f"{'='*60}")
    print(f"‚úÖ √öspe≈°ne vytvoren√Ωch tagov: {len(created_tags)}")
    print(f"üß† Testovan√© ment√°lne stavy: {len(set(tag.mental_state for tag in created_tags))}")
    print(f"üí≠ Testovan√© emocion√°lne t√≥ny: {len(set(tag.emotion_tone for tag in created_tags))}")
    print(f"‚è∞ Testovan√© ƒçasov√© kontexty: {len(set(tag.temporal_context for tag in created_tags))}")
    print(f"üîÆ Priemern√° introspekt√≠vna hƒ∫bka: {sum(tag.introspective_depth for tag in created_tags) / len(created_tags):.2f}")
    
    print(f"\nüéØ Demo dokonƒçen√© √∫spe≈°ne!")
    print("V≈°etky Pydantic v2 funkcie funguj√≠ spr√°vne.")

if __name__ == "__main__":
    main()
